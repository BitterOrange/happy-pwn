#!/bin/bash

MAIN_DIR="$(cd "$(dirname "$0")" && cd './../' && pwd)/"

error () {
    echo $1
    exit 1
}

usage () {
    echo "Usage: $0 [-a=--elf <elf>] [-b=--libc <libc>] [-c=--ld <ld>]"
    # echo "Usage: $0 [-a=--elf <elf>] [-b=--libc <libc>]"
    echo "       $0 --help (for help)"
    exit 3
}

longest_common_prefix () {
    list=$@
    n=${#list[@]}
    if test $n -eq 0; then
        return ""
    fi
    first_directory=${list[0]}
    result=""
    i=0
    while :; do
        if test $i -ge ${#first_directory}; then
            echo $result
            exit 0
        fi
        ch=${first_directory:$i:1}
        for directory in $list; do
            if test $i -ge ${#directory} || test ${directory:$i:1} != $ch; then
                echo $result
                exit 0
            fi
        done
        i=$(($i+1))
        result+=$ch
    done
}

echo "happy-pwn - PWN initializing tool"
echo "Powered by BitterOrange."

# Decide ELF, LIBC and LD
while test $# -gt 0; do
    case $1 in
    -a | --elf)
        if test $ELF; then
            error "[X] ELF is redeclared. Please check your command."
        fi
        ELF=$2
        if [ ! -f $ELF ]; then
            error "[X] ELF $ELF does not exist. Please check your file."
        fi
        echo "[O] ELF: $ELF"
        shift 2
        ;;
    -b | --libc)
        if test $LIBC; then
            error "[X] LIBC is redeclared. Please check your command."
        fi
        LIBC=$2
        if [ ! -f $LIBC ]; then
            error "[X] LIBC $LIBC does not exist. Please check your file."
        fi
        echo "[O] LIBC: $LIBC"
        shift 2
        ;;
    -c | --ld)
        if test $LD; then
            error "[X] LD is redeclared. Please check your command."
        fi
        LD=$2
        if [ ! -f $LD ]; then
           error "[X] LD $LD does not exist. Please check your file."
        fi
        echo "[O] LD: $LD"
        shift 2
        ;;
    -h | --help)
        usage
        shift
        ;;
    *)
        usage
        shift
        ;;
    esac
done
MATCHED_ELF=()
MATCHED_LIBC=()
MATCHED_LD=()
for i in ./* ; do
    # Check if the file is ELF file
    if [ -h $i ] || [ ! -f $i ] || [[ $(head -c 4 $i) != ?"ELF" ]]; then
        continue
    fi
    filename=$(basename $i)
    if [[ ${filename,,} = "libc"* ]]; then
        if test -z $LIBC; then
            MATCHED_LIBC+=($i)
            echo "[!] Matched LIBC: $i"
        fi
    elif [[ ${filename,,} = "ld"* ]]; then
        if test -z $LD; then
            MATCHED_LD+=($i)
            echo "[!] Matched LD: $i"
        fi
    else
        if test -z $ELF; then
            MATCHED_ELF+=($i)
            echo "[!] Matched ELF: $i"
        fi
    fi
done
if test -z $ELF; then
    if test ${#MATCHED_ELF[@]} -eq 0; then
        error "[X] Failed to match ELF. Please use option \"-a <elf>\" to specify one."
    elif test ${#MATCHED_ELF[@]} -gt 1; then
        echo "[X] Multiple ELFs are found:"
        for i in ${MATCHED_ELF[@]}; do
            echo " - $i"
        done
        error "[X] Please use option \"-a <elf>\" to specify one."
    else
        ELF=${MATCHED_ELF[0]}
        echo "[O] Decided ELF: $ELF"
    fi
fi
if test -z $LIBC; then
    if test ${#MATCHED_LIBC[@]} -eq 0; then
        error "[X] Failed to match LIBC. Please use option \"-b <libc>\" to specify one."
    elif test ${#MATCHED_LIBC[@]} -gt 1; then
        echo "[X] Multiple LIBCs are found:"
        for i in ${MATCHED_LIBC[@]}; do
            echo " - $i"
        done
        error "[X] Please use option \"-b <libc>\" to specify one."
    else
        LIBC=${MATCHED_LIBC[0]}
        echo "[O] Decided LIBC: $LIBC"
    fi
fi
if test -z $LD; then
    # if test ${#MATCHED_LD[@]} -eq 0; then
    #     error "[X] Failed to match LD. Please use option \"-c <ld>\" to specify one."
    # elif
    if test ${#MATCHED_LD[@]} -gt 1; then
        echo "[X] Multiple LDs are found:"
        for i in ${MATCHED_LD[@]}; do
            echo " - $i"
        done
        error "[X] Please use option \"-c <ld>\" to specify one."
    fi
    # else
    if test ${#MATCHED_LD[@]} -ne 0; then
        LD=${MATCHED_LD[0]}
        echo "[O] Decided LD: $LD"
    fi
fi

# Find correct glibc version
VERSION_STRING=$(strings $LIBC | grep '2\.[0-9][0-9]-[0-9]ubuntu[0-9\.]*' -o)
if test -z $VERSION_STRING; then
    echo "[X] Failed to find version for this libc."
    if test -z $LD; then
        error "[X] It is likely that this libc is not a released one."
    else
        echo "[!] Since LD is provided, it is still possible that the ELF could be patched."
        patchelf --add-needed $LIBC --set-interpreter $LD $ELF
        chmod 755 $ELF
        echo "[O] Successfully patched the ELF."
        exit 0
    fi
fi
VERSION=${VERSION_STRING%-*}
ARCHITECTURE=$(objdump -a $ELF | grep -E 'elf64-x86-64|elf32-i386' -o)
case $ARCHITECTURE in
"elf64-x86-64")
    LIBC_ARCH="amd64"
    ;;
"elf32-i386")
    LIBC_ARCH="i386"
    ;;
*)
    error "[X] Failed to decide architecture."
    ;;
esac
BUILD="${VERSION_STRING#*-}_$LIBC_ARCH"
# TARGET_DIR="$(pwd)/"
# TARGET_ELF="$TARGET_DIR./easy_heap"
echo "[O] Glibc version: $VERSION"
echo "[O] Glibc build: $BUILD"

# Get unstripped libc
echo "[!] Getting unstripped glibc..."
GLIBC_DIR=("${MAIN_DIR}glibc-all-in-one/${GLIBC_DIR}libs/$VERSION-$BUILD/")
if [ ! -d $GLIBC_DIR ]; then
    echo "[X] Glibc path of target version ($VERSION-$BUILD) doesn't exist."
    error "[X] Expected path: $GLIBC_DIR."
fi
UNSTRIPPED_LIBC=("${GLIBC_DIR}.unstripped/libc-$VERSION.so")
if [ ! -f $UNSTRIPPED_LIBC ]; then
    UNSTRIPPED_LIBC="${GLIBC_DIR}.unstripped/libc.so.6"
    if [ ! -f $UNSTRIPPED_LIBC ]; then
        echo "[X] Target unstripped libc ($VERSION-$BUILD) doesn't exist."
        error "[X] Expected path: $UNSTRIPPED_LIBC."
    fi
fi
UNSTRIPPED_LD=("${GLIBC_DIR}.unstripped/ld-$VERSION.so")
if [ ! -f $UNSTRIPPED_LD ]; then
    UNSTRIPPED_LD=("${GLIBC_DIR}.unstripped/ld-linux-x86-64.so.2")
    if [ ! -f $UNSTRIPPED_LD ]; then
        echo "[X] Target interpreter ($VERSION-$BUILD) doesn't exist."
        error "[X] Expected path: $UNSTRIPPED_LD."
    fi
fi
TARGET_LIBC_LINK=("./libc.so.6")
TARGET_LD_LINK=("./ld-linux-x86-64.so.2")
ln -s -f $UNSTRIPPED_LIBC $TARGET_LIBC_LINK
ln -s -f $UNSTRIPPED_LD $TARGET_LD_LINK
# for i in $(patchelf --print-needed $ELF); do
#     patchelf --remove-needed $i $ELF
# done
patchelf --add-needed $TARGET_LIBC_LINK --set-interpreter $TARGET_LD_LINK $ELF
chmod 755 $ELF
echo "[O] Successfully untripped and patched the glibc."

# Locate target directory of the source code
echo "[!] Finding glibc compilation directory..."
COMPILATION_DIRS=$(readelf -Wwi $UNSTRIPPED_LIBC | grep DW_AT_comp_dir | grep -E ':(?:[^:\r\n]*\()?([^)\r\n\s]+)\s*$' -o | sed -e 's/^[: \t]*//')

COMPILATION_ROOT=$(longest_common_prefix $COMPILATION_DIRS)
echo "[!] Glibc compilation directory: $COMPILATION_ROOT"
for directory_name in $(echo $COMPILATION_ROOT | tr '/' '\n'); do
    if test $directory_name = ".."; then
        echo "[X] Dicectory contains \"upward\" (../), which is probably escape your solution and harm your system."
        error "[X] Please build your source code reference manually."
    fi
done
if test ${COMPILATION_ROOT:0:1} = '.'; then
    COMPILATION_ROOT=${COMPILATION_ROOT:1}
fi
if test ${COMPILATION_ROOT:0:1} = '/'; then
    COMPILATION_ROOT=${COMPILATION_ROOT:1}
fi
COMPILATION_ROOT="./$COMPILATION_ROOT"
echo "[O] Target compilation directory: $COMPILATION_ROOT"
mkdir -p $COMPILATION_ROOT

GLIBC_SOURCE_DIR=("${MAIN_DIR}glibc-source-all/glibc-$VERSION/")
if [ ! -d $GLIBC_SOURCE_DIR ]; then
    echo "[X] Glibc source code path of target version ($VERSION-$BUILD) doesn't exist."
    echo "[X] Expected path: $GLIBC_SOURCE_DIR."
    exit
fi

# Link glibc source code
echo "[O] Linking global glibc source code from \"$GLIBC_SOURCE_DIR\"..."
ln -s -f $GLIBC_SOURCE_DIR*/ $COMPILATION_ROOT
if test $? -ne 0; then
    error "[O] Failed to link source code."
fi

echo "[O] Successfully linked source code at \"$COMPILATION_ROOT\"."

